(x) -> exactamente una x
[x] -> cero o una x
{x} -> cero o mas x

programa = <bloque> + "."

bloque = ["const" <ident> = <numero> ["," <ident> = <numero>] ";"]
	|["var" <ident> ["," <ident>] ";"]
	|{"procedure" <ident> ";" <bloque>} <proposicion>

proposicion =	[<ident> ":=" <expresion>
		| "call" <ident>
		| "begin" <proposicion> { ";" <proposicion> } "end"
		| "if" <condicion> "then" <proposicion>
		| "while" <condicion> "do" <proposicion>
		| "readln" "(" <ident> {"," <ident>} ")"
		| "write" "(" (<expresion> | <cadena>) {"," (<expresion> | <cadena>)} ")"
		| "writeln" ["(" (<expresion> | <cadena>) {"," (<expresion> | <cadena>)} ")"] ]

condicion = "odd" <expresion>
	    |<expresion> ("=" | "<>" | "<" | "<=" | ">" | ">=") <expresion>
		
expresion = ["+" | "-"] <termino> {("+" | "-") <termino>}

termino = <factor> {("*" | "/") <factor>}

factor = <ident>
	|<numero>
	|"(" <expresion> ")"

cadena = "'" {az-AZ0_09} "'"



BIEN HECHO:
(x)* cero o mas x
(x)+ una o mas x
(x)? cero o una x

programa ::= bloque '.'

bloque ::=	(('const' 'ident' '=' 'numero' (',' 'ident' '=' 'numero')* ';')?
		('var' 'ident' (',' 'ident')* ';')?
		(('procedure' 'ident' ';' bloque ';')*)?)
		proposicion

proposicion ::= 'ident' '::=' expresion
		| 'call' 'ident'
		| 'begin' proposicion (';' proposicion)* 'end'
		| 'if' condicion 'then' proposicion
		| 'while' condicion 'do' proposicion
                | 'readln' '(' 'ident' (',' 'ident')* ')'
		| 'writeln' ('(' ('cadena'| expresion) (',' ('cadena' | expresion))* ')')* 
                | 'write' '(' ('cadena' | expresion) (',' ('cadena' | expresion))* ')'
		| 

condicion ::= 'odd' expresion | expresion ('=' | '<>' | '<' | '>' | '<=' | '>=') expresion

expresion ::= ('+' | '-')* termino (('+' | '-') termino)*

termino ::= factor (('*' | '/') factor)*

factor ::= 'ident' | 'numero' | '(' expresion ')'



























